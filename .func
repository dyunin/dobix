#!/bin/bash - 
#===============================================================================
#
#          FILE: .func
# 
#         USAGE: ./.func 
# 
#   DESCRIPTION: All functions for dobix
# 
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Peter Dyunin (), 
#  ORGANIZATION: 
#       CREATED: 15.03.2020 22:19
#      REVISION:  ---
#===============================================================================

set -o nounset                              # Treat unset variables as an error

if [[ -f .env ]]; then
  source .env
fi

frontend_conf_d='frontend/conf.d'
template_vhost='.templates/template.vhost'


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  install_software
#   DESCRIPTION:  Install docker software
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
install_software ()
{
  hash curl 2>/dev/null
  if [[ $? > 0 ]]; then
    echo "Установка curl..."
    sudo apt-get install -y curl
  fi
  hash git 2>/dev/null
  if [[ $? > 0 ]]; then
    echo "Установка git..."
    sudo apt-get install -y git
  fi
  hash docker 2>/dev/null
  if [[ $? > 0 ]]; then
    echo "Установка docker..."
    curl -fsSL https://get.docker.com | sudo sh &>/dev/null
    if [[ $(id -u) != 0 ]]; then
    echo "Добавляем пользователя в группу docker..."
      sudo usermod -aG docker $USER
    fi
  fi
  hash docker-compose 2>/dev/null
  if [[ $? > 0 ]]; then
    echo "Установка docker-compose..."
    sudo curl -L "https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)" \
      -o /usr/bin/docker-compose
    sudo chmod +x /usr/bin/docker-compose
  fi
  if [[ $(id -u) != 0 ]]; then
    echo ""
    echo "Необходимое ПО установлено, запустите меню еще раз и настройте окружение"
    newgrp docker
  else
    echo "Необходимое ПО установлено, настройте окружение"
  fi
}	# ----------  end of function install_software  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  install_env
#   DESCRIPTION:  Install Docker environment
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
install_env ()
{
  env_file='.env'
  template_env='.templates/template.env'
  frontend_conf_d='frontend/conf.d'
  
  source .func
  
  read -p "Введите название пула для сайтов: " poolname
  read -p "Укажите путь к каталогу где будут хранится сайты: " sitepath
  read -p "Введите имя базы данных: " dbname
  read -p "Введите имя пользователя базы данных: " dbuser
  read -p "Введите пароль пользователя базы данных. В пароле могут быть только цифры и латинские буквы: " dbpasswd
  read -p "Введите пароль суперпользователя root базы данных. В пароле могут быть только цифры и латинские буквы: " dbrootpasswd

  if [[ "${sitepath: -1}" == '/' ]]; then
    sitepath=${sitepath::-1}
  fi

  if [[ ! $dbpasswd =~ ^[[:alnum:]]+$ ]]; then
      echo "Пароль может содержать только цифры и латинские буквы !!!"
    while true; do
      if [[ ! $dbpasswd =~ ^[[:alnum:]]+$ ]]; then
        unset dbpasswd
        read -p "Еще раз ведите пароль пользователя базы данных: " dbpasswd
      else
        break
      fi
    done
  fi

  if [[ ! $dbrootpasswd =~ ^[[:alnum:]]+$ ]]; then
      echo "Пароль суперпользователя может содержать только цифры и латинские буквы !!!"
    while true; do
      if [[ ! $dbrootpasswd =~ ^[[:alnum:]]+$ ]]; then
        unset dbrootpasswd
        read -p "Еще раз ведите пароль суперпользователя root базы данных: " dbrootpasswd
      else
        break
      fi
    done
  fi
  
  cp $template_env $env_file
  
  sed -i "s|##uid##|$(id -u)|g"               $env_file
  sed -i "s|##poolname##|$poolname|g"         $env_file
  sed -i "s|##sitepath##|$sitepath|g"         $env_file
  sed -i "s|##dbname##|$dbname|g"             $env_file
  sed -i "s|##dbuser##|$dbuser|g"             $env_file
  sed -i "s|##dbpasswd##|$dbpasswd|g"         $env_file
  sed -i "s|##dbrootpasswd##|$dbrootpasswd|g" $env_file

  if [[ ! -d $sitepath ]]; then
    sudo mkdir -p $sitepath
    sudo chown -R $USER: $sitepath
  fi

  docker-compose up -d --build
  echo ""
  echo "Окружение готово к работе. Добавьте сайт."
  post_install
}	# ----------  end of function install  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  add_trial_version
#   DESCRIPTION:  Create trial version bitrix site
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
add_trial_version ()
{
  source .env
  read -p "Введите название сайта " vhost
  mkdir -p $SITE_PATH/$vhost/www
  cp $template_vhost $frontend_conf_d/$vhost.conf
  sed -i "s/##vhostname##/$vhost/g" $frontend_conf_d/$vhost.conf
  curl -L "http://www.1c-bitrix.ru/download/scripts/bitrixsetup.php" \
    -o $SITE_PATH/$vhost/www/bitrixsetup.php
  docker down
  docker-compose up -d --build
  exit 0
}	# ----------  end of function add_trial_version  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  create_db
#   DESCRIPTION:  Create mysql database
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
create_db ()
{
  source .env
  read -p "Введите название базы данных " dbname
  docker exec -i ${PROJECT_NAME}_mysql mysql -uroot -p$MYSQL_ROOT_PASSWORD \
    -e "CREATE DATABASE IF NOT EXISTS $dbname CHARACTER SET utf8 COLLATE utf8_unicode_ci; \
        GRANT ALL PRIVILEGES ON $dbname . * TO \`$MYSQL_USER\`@\`localhost\`; \
        FLUSH PRIVILEGES;" &>/dev/null
  echo "База данных $dbname создана"
}	# ----------  end of function create_db  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  load_dump
#   DESCRIPTION:  Load exist mysql dump to the mysql container
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
load_dump ()
{
  source .env
  read -p "Укажите путь к дампу базы данных. Загрузить дамп можно в текстовом формате или в архиве gzip: " dumppath
  read -p "Введите название базы данных куда будет загружен дамп " dbname
  if [[ $(file $dumppath | cut -d' ' -f2) == gzip ]]; then
    echo "Загружается дамп..."
    zcat $dumppath | docker exec -i ${PROJECT_NAME}_mysql mysql -uroot -p$MYSQL_ROOT_PASSWORD $dbname &>/dev/null
  elif [[ $(file $dumppath | cut -d' ' -f4 | sed 's/.$//') == text ]]; then
    echo "Загружается дамп..."
    cat $dumppath | docker exec -i ${PROJECT_NAME}_mysql mysql -uroot -p$MYSQL_ROOT_PASSWORD $dbname &>/dev/null
  else  
    echo "Непонятный тип дампа, проверте путь и формат файла дампа."
    exit 1
  fi
}	# ----------  end of function load_dump  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  add_vhost
#   DESCRIPTION:  Add new vhost
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
add_vhost ()
{
  source .env
  read -p "Введите название сайта " vhost
  sudo mkdir -p $SITE_PATH/$vhost/www
  sudo chown -R $USER: $SITE_PATH/$vhost
  cp $template_vhost $frontend_conf_d/$vhost.conf
  sed -i "s/##vhostname##/$vhost/g" $frontend_conf_d/$vhost.conf
  create_db
  load_dump
  docker down
  docker-compose up -d --build
  echo ""
  echo "Разместите файлы проекта в docroot сайта $SITE_PATH/$vhost/www"
  echo "Настройте подключение к базе данных вручную"
  echo "Или воспользуйтесь меню, пункт 6"
}	# ----------  end of function add_vhost  ----------


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  make_settings
#   DESCRIPTION:  Make settings. Files dbconn.php and .settings.php
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
make_settings ()
{
  source .env
  read -p "Укажите docroot сайта: " docroot
  if [[ "${docroot: -1}" == '/' ]]; then
  docroot=${docroot::-1}
  fi
  read -p "Укажите название базы данных: " namedb

  settings_file="$docroot/bitrix/.settings.php"
  dbconn_file="$docroot/bitrix/php_interface/dbconn.php"
  dbhost=`grep DBHost     $dbconn_file | awk -F '"' '{print $2}'`
  dbuser=`grep DBLogin    $dbconn_file | awk -F '"' '{print $2}'`
  dbname=`grep DBName     $dbconn_file | awk -F '"' '{print $2}'`
  dbpass=`grep DBPassword $dbconn_file | awk -F '"' '{print $2}'`

  sed -i "s|$dbhost|db|g"              $settings_file
  sed -i "s|$dbuser|$MYSQL_USER|g"     $settings_file
  sed -i "s|$dbpass|$MYSQL_PASSWORD|g" $settings_file
  sed -i "s|$dbname|$namedb|g"         $settings_file
  sed -i "s|$dbhost|db|g"              $dbconn_file
  sed -i "s|$dbuser|$MYSQL_USER|g"     $dbconn_file
  sed -i "s|$dbpass|$MYSQL_PASSWORD|g" $dbconn_file
  sed -i "s|$dbname|$namedb|g"         $dbconn_file
}	# ----------  end of function make_settings  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  post_install
#   DESCRIPTION:  Choise install project
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
post_install ()
{
  local choice
  echo ""
  echo "  1. Установить ознакомительную версию Битрикс"
  echo "  2. Развернуть существующий сайт"
	echo "  0. Выход"
  echo ""
  read -p "Выберите вариант установки " choice
  case $choice in
    1) add_trial_version ;;
    2) add_vhost ;;
    0) exit 0 ;;
  esac
}	# ----------  end of function post_install  ----------
