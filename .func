#!/bin/bash - 
#===============================================================================
#   DESCRIPTION: All functions for dobix
#        AUTHOR: Peter Dyunin (), 
#===============================================================================

set -o nounset                              # Treat unset variables as an error

if [[ -f .env ]]; then
  source .env
fi

danger='\033[0;41;37m'
warning='\033[1;33m'
success='\033[1;32m'
info='\033[1;36m'
header='\033[0;42;37m'
std='\033[0;0;39m'
frontend_conf_d='frontend/conf.d'
template_vhost='.templates/template.vhost'
redhat_family='/etc/redhat-release'
debian_family='/etc/debian_version'


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  check_software
#   DESCRIPTION:  Check on installed software
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
check_software ()
{
  hash docker 2>/dev/null \
  && hash docker-compose 2>/dev/null \
  && hash curl 2>/dev/null
  if [[ $? > 0 ]]; then
    echo -e "${warning}Установите необходимое ПО для работы, Меню -- Пункт 1${std}" && sleep 1
    exit 1
  fi 
}	# ----------  end of function check_software  ----------


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  check_env
#   DESCRIPTION:  Check environment file exist
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
check_env ()
{
  if [[ ! -e .env ]]; then
    echo -e "${warning}Необходимо настроить окружение. Меню -- Пункт 2${std}"
    exit 1
  fi
}	# ----------  end of function check_env  ----------


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  check_port
#   DESCRIPTION:  Check if port is in use
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
check_port ()
{
  hash lsof 2>/dev/null
  if [[ $? > 0 ]]; then
    if [[ -e $debian_family ]]; then
      sudo apt-get update &> /dev/null
      sudo apt-get install -y lsof &> /dev/null
    elif [[ -e $redhat_family ]]; then
      sudo yum install -y lsof &>/dev/null
    fi
  fi
  sudo lsof -i:$1 &>/dev/null
  if [[ $? == 0 ]]; then
    program_name=$(sudo lsof -i:$1 | awk 'NR==2 {print $1}')
    echo -e "${warning}Порт $1 занят программой $program_name, необходимо выбрать другой порт или беспардонно избавиться от $program_name ${std}"
    exit 1
  fi
}	# ----------  end of function check_port  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  install_software
#   DESCRIPTION:  Install docker software
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
install_software ()
{
  echo ""
  [[ -e $debian_family ]] && sudo apt-get update &>/dev/null

  hash curl 2>/dev/null
  if [[ $? > 0 ]]; then
  echo -e "${info}Установка curl..."
    if [[ -e $debian_family ]]; then
      sudo apt-get install -y curl &>/dev/null
    elif [[ -e $redhat_family ]]; then
      sudo yum install -y curl &>/dev/null
    fi
  fi
  hash git 2>/dev/null
  if [[ $? > 0 ]]; then
    echo "Установка git..."
    if [[ -e $debian_family ]]; then
      sudo apt-get install -y git &>/dev/null
    elif [[ -e $redhat_family ]]; then
      sudo yum install -y git &>/dev/null
    fi
  fi
  hash docker 2>/dev/null
  if [[ $? > 0 ]]; then
    echo "Установка docker..."
    curl -fsSL https://get.docker.com | sudo sh &>/dev/null
    if [[ $(id -u) != 0 ]]; then
    echo "Добавляем пользователя в группу docker..."
      sudo usermod -aG docker $USER
    fi
  fi
  hash docker-compose 2>/dev/null
  if [[ $? > 0 ]]; then
    echo -e "Установка docker-compose...${std}"
    sudo curl -sSL "https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)" \
      -o /usr/bin/docker-compose
    sudo chmod +x /usr/bin/docker-compose
  fi
  if [[ $(id -u) != 0 ]]; then
    echo ""
    echo -e "${success}Необходимое ПО установлено"
    echo "Настройте рабочее окружение, Меню -- Пункт 2"
    newgrp docker
    echo ""
  else
    echo "Необходимое ПО установлено"
    echo -e "Настройте рабочее окружение, Меню -- Пункт 2${std}"
    echo ""
  fi
}	# ----------  end of function install_software  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  install_env
#   DESCRIPTION:  Install Docker environment
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
install_env ()
{
  check_software
  local choice
  if [[ -f .env ]]; then
    echo ""
    echo -e "${warning}Окружение уже установлено!${std}"
    echo ""
    echo "1. Установить окружение заново"
    echo "0. Выход"
    echo ""
    read -p "Выберите пункт меню и нажмите Enter " choice
    case $choice in
       1) rm -rf .env ;;
       0) exit 0 ;;
    esac
  fi

  env_file='.env'
  template_env='.templates/template.env'
  frontend_conf_d='frontend/conf.d'
  
  source .func
  echo ""
  echo -e "${info}Установка окружения.${std}" 
  echo ""
  echo -e "${warning}В скобках значения по умолчанию, можно оставить их или указать свой.${std}"
  echo ""
  
  read -p "Укажите порт, если хотите использовать другой: (8080) " port

  #-------------------------------------------------------------------------------
  # Check port
  #-------------------------------------------------------------------------------
  [[ -z "$port" ]] && port='8080'
  check_port $port

  read -p "Введите название окружения для сайтов: (dobix) " poolname
  read -p "Укажите путь полный путь к каталогу где будут храниться сайты: (./sites) " sitepath
  read -p "Введите имя пользователя базы данных: (dobix) " dbuser
  echo -e "${warning}Пароль может содержать только цифры и латинские буквы ${std}"
  read -sp "Введите пароль пользователя базы данных: (dobix) " dbpasswd
  echo ""
  read -sp "Введите пароль суперпользователя root базы данных: (dobix) " dbrootpasswd
  echo ""

  [[ -z "$poolname" ]]       && poolname='dobix'
  [[ -z "$sitepath" ]]       && sitepath='./sites'
  [[ -z "$dbuser" ]]         && dbuser='dobix'
  [[ -z "$dbpasswd" ]]       && dbpasswd='dobix'
  [[ -z "$dbrootpasswd" ]]   && dbrootpasswd='dobix'

  if [[ "${sitepath: -1}" == '/' ]]; then
    sitepath=${sitepath::-1}
  fi

  if [[ ! $dbpasswd =~ ^[[:alnum:]]+$ ]]; then
      echo -e "${warning}Пароль пользователя может содержать только цифры и латинские буквы !!!${std}" && sleep 1
    while true; do
      if [[ ! $dbpasswd =~ ^[[:alnum:]]+$ ]]; then
        unset dbpasswd
        read -sp "Еще раз ведите пароль пользователя базы данных: " dbpasswd
        echo ""
      else
        break
      fi
    done
  fi

  if [[ ! $dbrootpasswd =~ ^[[:alnum:]]+$ ]]; then
      echo -e "${warning}Пароль суперпользователя базы данных может содержать только цифры и латинские буквы !!!${std}" && sleep 1
    while true; do
      if [[ ! $dbrootpasswd =~ ^[[:alnum:]]+$ ]]; then
        unset dbrootpasswd
        read -sp "Еще раз ведите пароль суперпользователя root базы данных: " dbrootpasswd
        echo ""
      else
        break
      fi
    done
  fi

  echo ""
  echo -e "${info}Готовим окружение...${std}"
  
  cp $template_env $env_file
  sed -i "s|##uid##|$(id -u)|g"               $env_file
  sed -i "s|##port##|$port|g"                 $env_file
  sed -i "s|##poolname##|$poolname|g"         $env_file
  sed -i "s|##sitepath##|$sitepath|g"         $env_file
  sed -i "s|##dbuser##|$dbuser|g"             $env_file
  sed -i "s|##dbpasswd##|$dbpasswd|g"         $env_file
  sed -i "s|##dbrootpasswd##|$dbrootpasswd|g" $env_file

  if [[ ! -d $sitepath ]]; then
    sudo mkdir -p $sitepath
  fi
  sudo chown -R $USER: $sitepath
 
  #-------------------------------------------------------------------------------
  #  Create env for default site
  #-------------------------------------------------------------------------------
  mkdir -p db/conf.d && cp .templates/db.cnf db/conf.d
  mkdir -p $sitepath/bitrix/www
  curl -sSL http://dev.1c-bitrix.ru/download/scripts/bitrix_server_test.php \
    -o $sitepath/bitrix/www/index.php

  docker-compose up -d --build &> /dev/null
  echo ""
  echo -e "${success}Окружение готово к работе. Добавьте сайт.${std}"
  post_install
}	# ----------  end of function install  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  add_trial_version
#   DESCRIPTION:  Create trial version bitrix site
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
add_trial_version ()
{
  check_software
  check_env
  source .env
  echo ""
  read -p "Введите название сайта " vhost
  echo ""
  if [[ -z $vhost ]]; then
    echo -e "${danger}Пустое имя у сайта!??? А такие существуют?${std}" 
    exit 1
  fi
  sudo mkdir -p $SITE_PATH/$vhost/www
  sudo chown -R $USER: $SITE_PATH/$vhost
  cp $template_vhost $frontend_conf_d/$vhost.conf
  sed -i "s/##vhostname##/$vhost/g" $frontend_conf_d/$vhost.conf
  curl -sSL "http://www.1c-bitrix.ru/download/scripts/bitrixsetup.php" \
    -o $SITE_PATH/$vhost/www/bitrixsetup.php
  echo -e "${info}Установка docroot сайта${std}"
  create_db
  echo ""
  echo -e "${info}Применение изменений...${std}"
  docker-compose down &> /dev/null
  docker-compose up -d --build &> /dev/null
  echo ""
  echo -e "${success}"
  echo "Готово. Добавьте название сайта $vhost в файл /etc/hosts связав" \
    "его с адресом где развернуто рабочее окружение"
  echo -e "Например 127.0.0.1 site. После этого перейдите в браузере по адресу" \
    "http://site:[port number] и продолжите установку${std}"
  echo ""
  echo -e "${warning}При установке продукта, на шаге 'Создание базы данных', в поле * Сервер, необходимо указать db."
  echo -e "Т.е. замените localhost на db. Заполните остальные поля.${std}"
  echo ""
  exit 0
}	# ----------  end of function add_trial_version  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  create_db
#   DESCRIPTION:  Create mysql database
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
create_db ()
{
  check_software
  check_env
  source .env
  read -p "Введите название базы данных " dbname
  echo ""
  if [[ -z $dbname ]]; then
    echo -e "${danger}Пустое имя!??? База данных NULL что ли?${std}" 
    exit 1
  fi
  exist_name=$(docker exec -i ${PROJECT_NAME}_mysql mysql -uroot -p$MYSQL_ROOT_PASSWORD -e "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '${dbname}';" 2>/dev/null | tail -1)
  if [[ $dbname == $exist_name ]]; then
    echo -e "${danger}Такая база данных уже существует!${std}"
    exit 1
  fi

  docker exec -i ${PROJECT_NAME}_mysql mysql -uroot -p$MYSQL_ROOT_PASSWORD \
    -e "CREATE DATABASE IF NOT EXISTS $dbname CHARACTER SET utf8 COLLATE utf8_unicode_ci; \
        GRANT ALL PRIVILEGES ON $dbname . * TO \`$MYSQL_USER\`@\`%\`; \
        FLUSH PRIVILEGES;" &>/dev/null
  echo -e "${info}База данных $dbname создана${std}"
}	# ----------  end of function create_db  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  load_dump
#   DESCRIPTION:  Load exist mysql dump to the mysql container
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
load_dump ()
{
  check_software
  check_env
  source .env
  local dbname
  echo ""
  read -p "Укажите полный путь к дампу базы данных. Загрузить дамп можно в текстовом формате или в архиве gzip: " dumppath
  if [[ -z $dumppath ]]; then
    echo -e "${danger}Пусто!? Вы не указали путь к дампу${std}" 
    exit 1
  elif [[ $(file $dumppath | cut -d' ' -f2) == gzip || $(file $dumppath | cut -d' ' -f4 | sed 's/.$//') == text ]]; then
    read -p "Введите название базы данных куда будет загружен дамп " dbname
    if [[ $(file $dumppath | cut -d' ' -f2) == gzip ]]; then
      echo -e "${info}Загружается дамп..."
      zcat $dumppath | docker exec -i ${PROJECT_NAME}_mysql mysql -uroot -p$MYSQL_ROOT_PASSWORD $dbname &>/dev/null
    elif [[ $(file $dumppath | cut -d' ' -f4 | sed 's/.$//') == text ]]; then
      echo -e "Загружается дамп...${std}"
      cat $dumppath | docker exec -i ${PROJECT_NAME}_mysql mysql -uroot -p$MYSQL_ROOT_PASSWORD $dbname &>/dev/null
    fi  
  else  
    echo -e "${danger}Непонятный тип дампа, проверте путь и формат файла дампа.${std}"
    exit 1
  fi
}	# ----------  end of function load_dump  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  add_vhost
#   DESCRIPTION:  Add new vhost
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
add_vhost ()
{
  check_software
  check_env
  source .env
  read -p "Введите название сайта " vhost
  if [[ -z $vhost ]]; then
    echo -e "${danger}Пусто!? Вы видели сайт с пустым именем?${std}" 
    exit 1
  fi
  sudo mkdir -p $SITE_PATH/$vhost/www
  sudo chown -R $USER: $SITE_PATH/$vhost
  cp $template_vhost $frontend_conf_d/$vhost.conf
  sed -i "s/##vhostname##/$vhost/g" $frontend_conf_d/$vhost.conf
  create_db
  load_dump
  echo "Применение изменений..."
  docker-compose down &> /dev/null
  docker-compose up -d --build &> /dev/null
  echo ""
  echo -e "${success}Готово"
  echo "Разместите файлы проекта в docroot сайта $SITE_PATH/$vhost/www"
  echo "Настройте подключение к базе данных вручную"
  echo -e "Или воспользуйтесь Mеню -- Пункт 6${std}"
}	# ----------  end of function add_vhost  ----------


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  make_settings
#   DESCRIPTION:  Make settings. Files dbconn.php and .settings.php
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
make_settings ()
{
  check_software
  check_env
  source .env
  read -p "Укажите docroot сайта: " docroot
  if [[ "${docroot: -1}" == '/' ]]; then
  docroot=${docroot::-1}
  fi
  read -p "Укажите название базы данных: " namedb

  settings_file="$docroot/bitrix/.settings.php"
  dbconn_file="$docroot/bitrix/php_interface/dbconn.php"
  dbhost=`grep DBHost     $dbconn_file | awk -F '"' '{print $2}'`
  dbuser=`grep DBLogin    $dbconn_file | awk -F '"' '{print $2}'`
  dbname=`grep DBName     $dbconn_file | awk -F '"' '{print $2}'`
  dbpass=`grep DBPassword $dbconn_file | awk -F '"' '{print $2}'`

  sed -i "s|$dbhost|db|g"              $settings_file
  sed -i "s|$dbuser|$MYSQL_USER|g"     $settings_file
  sed -i "s|$dbpass|$MYSQL_PASSWORD|g" $settings_file
  sed -i "s|$dbname|$namedb|g"         $settings_file
  sed -i "s|$dbhost|db|g"              $dbconn_file
  sed -i "s|$dbuser|$MYSQL_USER|g"     $dbconn_file
  sed -i "s|$dbpass|$MYSQL_PASSWORD|g" $dbconn_file
  sed -i "s|$dbname|$namedb|g"         $dbconn_file

  echo ""
  echo -e "${success}Готово${std}"
}	# ----------  end of function make_settings  ----------

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  post_install
#   DESCRIPTION:  Choise install project
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
post_install ()
{
  local choice
  echo ""
  echo "  1. Установить ознакомительную версию Битрикс"
  echo "  2. Развернуть существующий сайт"
	echo "  0. Выход"
  echo ""
  read -p "Выберите вариант установки " choice
  case $choice in
    1) add_trial_version ;;
    2) add_vhost ;;
    0) exit 0 ;;
  esac
}	# ----------  end of function post_install  ----------
